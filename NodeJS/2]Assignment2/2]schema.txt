-- Create CITIES table
CREATE TABLE CITIES (
    CITY CHAR(20),
    STATE CHAR(20),
    PRIMARY KEY (CITY)
);

-- Create WAREHOUSES table
CREATE TABLE WAREHOUSES (
    WID INTEGER,
    WNAME CHAR(30),
    LOCATION CHAR(20),
    EXTRA_CONTEXT JSON,
    CITY CHAR(20),
    FOREIGN KEY (CITY) REFERENCES CITIES(CITY),
    PRIMARY KEY (WID)
);

-- Create STORES table
CREATE TABLE STORES (
    SID INTEGER,
    STORE_NAME CHAR(20),
    LOCATION_CITY CHAR(20),
    PRIMARY KEY (SID),
    FOREIGN KEY (LOCATION_CITY) REFERENCES CITIES(CITY)
);

-- Create CUSTOMER table
CREATE TABLE CUSTOMER (
    CNO INTEGER,
    CNAME CHAR(50),
    ADDR VARCHAR(50),
    CU_CITY CHAR(20),
    PRIMARY KEY (CNO),
    FOREIGN KEY (CU_CITY) REFERENCES CITIES(CITY)
);

-- Create ORDERS table
CREATE TABLE ORDERS (
    ONO INT,
    ODATE DATE,
    CNO INTEGER,
    PRIMARY KEY (ONO),
    FOREIGN KEY (CNO) REFERENCES CUSTOMER(CNO)
);

-- Create ITEMS table
CREATE TABLE ITEMS (
    ITEMNO INTEGER,
    DESCRIPTION TEXT,
    WEIGHT DECIMAL(5,2),
    COST DECIMAL(5,2),
    PRIMARY KEY (ITEMNO)
);

-- Create ORDER_ITEMS table for Many-to-Many relationship between ORDERS and ITEMS
CREATE TABLE ORDER_ITEMS (
    ONO INT,
    ITEMNO INTEGER,
    ORDERED_QUANTITY INTEGER,
    FOREIGN KEY (ONO) REFERENCES ORDERS(ONO),
    FOREIGN KEY (ITEMNO) REFERENCES ITEMS(ITEMNO),
    PRIMARY KEY (ONO, ITEMNO)
);

-- Create STORE_ITEMS table for Many-to-Many relationship between STORES and ITEMS
CREATE TABLE STORE_ITEMS (
    SID INTEGER,
    ITEMNO INTEGER,
    QUANTITY INTEGER,
    FOREIGN KEY (SID) REFERENCES STORES(SID),
    FOREIGN KEY (ITEMNO) REFERENCES ITEMS(ITEMNO),
    PRIMARY KEY (SID, ITEMNO)
);


-- Query 1: Find the item that has the minimum weight
SELECT * FROM ITEMS WHERE WEIGHT = (SELECT MIN(WEIGHT) FROM ITEMS);

-- Query 2: Find the different warehouses in "Pune"
SELECT * FROM WAREHOUSES WHERE LOCATION = 'Pune';

-- Query 3: Find the details of items ordered by a customer named "Mr. Patil"
SELECT I.* 
FROM ITEMS I
JOIN ORDER_ITEMS OI ON I.ITEMNO = OI.ITEMNO
JOIN ORDERS O ON OI.ONO = O.ONO
JOIN CUSTOMER C ON O.CNO = C.CNO
WHERE C.CNAME = 'Mr. Patil';

-- Query 4: Find a Warehouse that has the maximum number of stores
SELECT W.*, COUNT(S.WID) AS STORE_COUNT
FROM WAREHOUSES W
LEFT JOIN STORES S ON W.WID = S.WID
GROUP BY W.WID
ORDER BY STORE_COUNT DESC
LIMIT 1;

-- Query 5: Find an item that is ordered for a minimum number of times
SELECT I.*, COUNT(OI.ITEMNO) AS ORDER_COUNT
FROM ITEMS I
LEFT JOIN ORDER_ITEMS OI ON I.ITEMNO = OI.ITEMNO
GROUP BY I.ITEMNO
ORDER BY ORDER_COUNT ASC
LIMIT 1;

-- Query 6: Find the detailed orders given by each customer
SELECT C.CNO, C.CNAME, O.*
FROM CUSTOMER C
LEFT JOIN ORDERS O ON C.CNO = O.CNO;
